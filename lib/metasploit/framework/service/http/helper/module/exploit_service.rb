require 'metasploit/framework/service/http/dto/exploit_details'
require 'metasploit/framework/service/http/dto/exploit_result'

module ExploitService

  def do_exploit(exploit_details)
    module_name = exploit_details.module_name
    module_object = load_module(module_name)
    verify_required_input(exploit_details.options, module_object.options)
    set_user_options(module_object, exploit_details.options)

    return ExploitResult.new({:module_name => module_name, :result => "success"})
  end

  #######
  private
  #######

  def load_module(module_name)
    module_object = nil
    begin
      module_object = @framework.modules.create(module_name)
      raise "Invalid module reference" if module_object.nil?
    rescue => e
      raise "Unable to load module: \"#{module_name}\" error: #{e.message}"
    end

    return module_object
  end

  def set_user_options(module_object, user_options)
    datastore = module_object.datastore
    user_options.each { |key, value|

      # maybe enhance to fuzzy matching
      module_option_key = get_module_option_key(key, module_object.options)
      datastore[module_option_key] =  value
    }

  end

  def get_module_option_key(user_key, module_options)
    module_options.each_key {|key|
      if user_key.casecmp(key).zero?
        return key
      end
    }

    raise "Unable to map passed option: #{user_key} to a module option"
  end

  def verify_required_input(passed_options, module_options)
    required_options = parse_required_options(module_options)
    return if required_options.empty?

    passed_keys = passed_options.keys.map {|key| key.downcase}

    missed_required_input = []
    required_options.each_key {|key|
      checked_value = key.downcase
      unless passed_keys.include?(checked_value)
        missed_required_input << checked_value
      end
    }

    unless missed_required_input.empty?
      raise "Missing input: #{missed_required_input.join(',')}"
    end
  end

  def parse_required_options(module_options)
    required_options = Hash.new
    module_options.each { |key, value|
        if value.required && value.default.nil?
          required_options[key] = value
        end
    }

    return required_options
  end
end