require 'metasploit/framework/service/http/dto/exploit_details'

module ExploitService

  def do_exploit(exploit_details)
    module_object = load_module(exploit_details.module_name)
    validate_input(expoit_details.options, module_object.options)
  end

  #######
  private
  #######

  def load_module(module_name)
    module_object = nil
    begin
      module_object = @framework.modules.create(module_name)
      raise "Invalid module reference" if module_object.nil?
    rescue => e
      raise "Unable to load module: \"#{module_name}\" error: #{e.message}"
    end

    return module_object
  end

  def validate_input(passed_options, module_options)
    required_options = parse_required_options(module_options)
  end

  def parse_required_options(module_options)
    required_options = Hash.new
    module_options.each { |key, value|
        if value.required && value.default.nil?
          required_options[key] = value
        end
    }

    return required_options
  end
end